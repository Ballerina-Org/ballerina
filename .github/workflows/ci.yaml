name: CI
on:
  push:
    branches:
      - "*"
    tags:
      - "*"
  pull_request:
jobs:
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4.2.2
      - run: npx prettier . --check
      - run: yarn
      - run: yarn compile-ballerina-core
  ballerina-core:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/libraries/ballerina-core
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-dotnet@v4.3.1
      - run: |
          dotnet restore
          dotnet tool restore
      - run: dotnet build
      - run: dotnet fantomas --check .
  ballerina-core-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/apps/ballerina-core.Tests
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-dotnet@v4.3.1
      - run: |
          dotnet restore
          dotnet tool restore
      - run: dotnet build
      - run: dotnet fantomas --check .
      - run: dotnet test
  ballerina-go:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/libraries/ballerina-core-go
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-go@v5.5.0
        with:
          go-version-file: backend/libraries/ballerina-core-go/go.mod
      - name: Check formatting
        run: test -z "$(gofmt -l .)"
      - run: go test ./...
      - run: go build ./...
      - name: Check go.mod is up to date
        run: go mod tidy -diff
  publish-ballerina-core:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - frontend
      - ballerina-core
      - ballerina-go
      - ballerina-core-tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: backend/libraries/ballerina-core
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-dotnet@v4.3.1
      - run: dotnet restore
      - name: Pack NuGet package
        run: |
          dotnet pack --configuration Release \
            /p:PackageVersion=${{ github.ref_name }} \
            --output ./nupkg
      - name: Publish to NuGet.org
        run: |
          dotnet nuget push ./nupkg/*.nupkg \
            --api-key "${{ secrets.NUGET_API_KEY }}" \
            --source "https://api.nuget.org/v3/index.json" \
            --skip-duplicate
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=${{ github.ref_name }}
          gh release create "$TAG_NAME" -n "Release $TAG_NAME of the Ballerina ðŸ©° runtime."

  ballerina-python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/libraries/ballerina-core-python
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.10"
      - run: |
          # https://python-poetry.org/docs/#ci-recommendations
          export POETRY_HOME=/opt/poetry
          python3 -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install poetry==2.1.2
          $POETRY_HOME/bin/poetry --version
          echo "$POETRY_HOME/bin/" >> $GITHUB_PATH
        shell: bash
      - run: poetry sync
      - run: poetry run ruff format --check
      - run: poetry run ruff check .
      - run: poetry run mypy
