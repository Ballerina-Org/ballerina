namespace Ballerina.DSL.Codegen.Python.LanguageConstructs

[<RequireQualifiedAccess>]
module Header =
  open Ballerina.Core.StringBuilder
  open System
  open Ballerina.DSL.Codegen.Python.LanguageConstructs.Model

  let private groupImportsBySource (imports: Set<Import>) =
    imports
    |> List.ofSeq
    |> List.groupBy (fun i -> i.Source)
    |> List.map (fun (source, imports) ->
       { Source = source; Target = imports |> List.map (fun i -> i.Target) |> String.concat(", ") })
    |> Set.ofList

  let Generate (imports: Set<Import>) =
    StringBuilder.One
      $$"""# Code generated by ballerina, DO NOT EDIT.

from __future__ import annotations
{{ String.Join("\n",
     imports
     |> groupImportsBySource
     |> Set.map (fun i -> $"from {i.Source} import {i.Target}")
     |> List.ofSeq
     |> List.sort
   )
}}

"""
